import { ZReviewLLMSchema } from "../types/zod";
import { z } from "zod";

export const generateReviewMarkdown = (issues: z.infer<typeof ZReviewLLMSchema>) => {
    const grouped = issues.reduce(
        (acc: Record<string, typeof issues>, issue) => {
            if (!acc[issue.type]) {
                acc[issue.type] = [];
            }
            acc[issue.type].push(issue);
            return acc;
        },
        {} as Record<string, typeof issues>
    );

    let markdown = `# 🔎 Code Review Report\n\nCode review report is ready\n\n---\n\n## Review Summary\n`;

    Object.keys(grouped).forEach((type) => {
        markdown += `\n## 🛠️ ${type} Issues\n`;

        grouped[type].forEach((issue, index) => {
            markdown += `\n### ${index + 1}. **File:** \
`;
            markdown += `\n- **Description:** ${issue.description}`;
            markdown += `\n- **Severity:** ${issue.severity}\n`;

            markdown += `\n#### 🚩 **Snippet:**\n${issue.snippet}\n`;

            markdown += `\n#### ✅ **Suggested Fix:**\n${issue.fix}\n`;
        });
    });

    markdown += `\n---\n\n*This issue was automatically generated by your friendly code review bot.* 🤖`;

    return markdown;
};
